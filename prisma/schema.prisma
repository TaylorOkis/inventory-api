
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model Customer {
  id              String         @id @default(uuid())
  customerType    CustomerType
  email           String?        @unique
  firstName       String
  lastName        String
  phone           String         @unique 
  gender          Gender
  maxCreditLimit  Float
  maxCreditDays   Int
  taxPin          String?
  NIN             String?        @unique
  country         String?
  location        String
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

enum CustomerType {
  RETAIL
  WHOLESALER
  DISTRIBUTOR
  OTHER
}


model Supplier {
  id                 String         @id @default(uuid())
  supplierType       SupplierType
  email              String?        @unique
  name               String
  contactPerson      String
  phone              String         @unique
  regNumber          String?        @unique
  bankAccountNumber  String?
  bankName           String?
  website            String
  country            String?
  location           String
  logo               String?        @default("https://img.icons8.com/?size=100&id=53386&format=png&color=000000")
  rating             Float
  notes              String
  products           Product[]
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
}

enum SupplierType {
  MANUFACTURER
  RETAILER
  WHOLESALER
  DISTRIBUTOR
  OTHER
}


model User {
  id         String    @id @default(uuid())
  email      String    @unique
  username   String    @unique
  password   String
  firstname  String   
  lastname   String   
  phone      String    @unique
  dob        DateTime?
  gender     Gender
  image      String?
  role       Role      @default(ATTENDANT)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  adminShops Shop[]    @relation("AdminShops")
}

enum Gender {
  MALE
  FEMALE
}

enum Role {
  ADMIN
  ATTENDANT
}


model Shop {
  id            String     @id @default(uuid())
  name          String     
  slug          String     @unique
  location      String     
  phone         String     @unique
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  adminId       String     
  admin         User       @relation(fields: [adminId], references: [id], name: "AdminShops")
  attendantIds  String[]     
}


model Unit {
  id            String     @id @default(uuid())
  name          String
  abbreviation  String
  slug          String     @unique
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Brand {
  id            String     @id @default(uuid())
  name          String
  slug          String     @unique
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Category {
  id            String     @id @default(uuid())
  name          String
  slug          String     @unique
  products      Product[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Product {
   id            String     @id @default(uuid())
   name          String
   description   String?
   alertQty      Int
   stockQty      Int
   barCode       String?   @unique
   sellingPrice  Int
   buyingPrice   Int?
   tax           Int?
   batchNumber   String? 
   image         String     @default("https://img.icons8.com/?size=100&id=53386&format=png&color=000000")
   sku           String     @unique
   productCode   String     @unique
   slug          String     @unique
   supplierId    String
   unitId        String
   brandId       String
   categoryId    String
   expiryDate    DateTime?
   supplier      Supplier   @relation(fields: [supplierId], references: [id])
   unit          Unit       @relation(fields: [unitId], references: [id])
   brand         Brand      @relation(fields: [brandId], references: [id])
   category      Category   @relation(fields: [categoryId], references: [id])
   createdAt     DateTime   @default(now())
   updatedAt     DateTime   @updatedAt
}
